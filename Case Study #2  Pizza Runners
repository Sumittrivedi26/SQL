
CREATE database pizza_runner;


DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" TIMESTAMP
);

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" TEXT
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');



select * from customer_orders;


---dataclWaning for runner_orders   


SELECT * FROM RUNNER_ORDERS;


--CONVERTING PICKUP TIM EINTOI DATE TIME


ALTER TABLE RUNNER_ORDERS
ADD COLUMN PICK_UP_TIME DATETIME;


UPDATE RUNNER_ORDERS
SET PICK_UP_TIME =
    CASE WHEN "pickup_time" IS NULL OR "pickup_time" LIKE 'null' or trim("pickup_time") = '' then null
    else
        TO_TIMESTAMP("pickup_time", 'YYYY-MM-DD HH24:MI:SS')
    END;

alter table RUNNER_ORDERS
drop column "pickup_time";

alter table RUNNER_ORDERS
rename column PICK_UP_TIME to "pickup_time";

select * from RUNNER_ORDERS;


--CONVERTING distance to  float


alter table runner_orders
add column distance_km float;


update runner_orders
set distance_km =
    case when "distance" is NULL OR "distance" LIKE 'null' or trim("distance") ='' then null
    else
        try_cast(regexp_replace("distance", '[^0-9.]','') as float)
    end;

alter table runner_orders
drop  column "distance" ;


alter table runner_orders
rename column distance_km to "distance";

select * from RUNNER_ORDERS;


-----duration 


alter table runner_orders
add column duration_min int;


update runner_orders
set duration_min =
    case when "duration" is NULL OR "duration" LIKE 'null' or trim("duration") ='' then null
    else
        try_cast(regexp_replace("duration", '[^0-9.]','') as int)
    end;

alter table runner_orders
drop  column "duration" ;


alter table runner_orders
rename column duration_min to "duration";

select * from RUNNER_ORDERS;


---replacing nulls

create or replace table RUNNER_ORDERS_final as

select "order_id","runner_id", 
    case when "cancellation" is null or "cancellation" like 'null' then ''
    else "cancellation"
    end as "cancellation",
    case when "pickup_time" is null or "pickup_time"  like 'null' then '9999-12-31 00:00:00' 
    else "pickup_time" 
    end as "pickup_time",
    case when "distance" is null or "distance" like 'null' then 0
    else "distance"
    end as "distance",
    case when "duration" is null or "duration" like 'null' then 0
    else "duration"
    end as "duration"
from RUNNER_ORDERS;



select * from RUNNER_ORDERS_final;




----cleaning customer table

create or replace table customer_orders_copy 
as 
select * from customer_orders;



select * from customer_orders_copy;

create or replace table customer_orders_final
as
select "order_id", "customer_id", "pizza_id",
case when "exclusions" is null or "exclusions" like 'null' then ''
    else "exclusions"
    end as "exclusions",
case when "extras" is null or "extras"  like 'null' then ''
    else "extras" 
    end as "extras" ,
"order_time"
 from customer_orders_copy;


 select * from customer_orders_final;



 ----How many pizzas were ordered?

 select count("order_id") as total_pizza_ordered from customer_orders_final;



 ----How many unique customer orders were made?

 select count(distinct("customer_id")) as total_customer_orders from customer_orders_final;





 ----How many successful orders were delivered by each runner?
select * from runner_orders_final;

select "runner_id", count(*) from  runner_orders_final where "cancellation" = ''
group by "runner_id";

SELECT "runner_id",count("order_id") as tot_successful_orders
FROM runner_orders_final
WHERE "distance" != 0
group by 1
order by 1;



---How many of each type of pizza was delivered?
select "pizza_id", "exclusions", "extras",count(*) from customer_orders_final as c 
left join  runner_orders_final as r
on c."order_id"= r."order_id"
where "cancellation" = '' 
group by "pizza_id", "exclusions", "extras";




select "pizza_id",count(*) from customer_orders_final as c 
left join  runner_orders_final as r
on c."order_id"= r."order_id"
where "cancellation" = '' 
group by "pizza_id";




SELECT
     p."pizza_id",
     p."pizza_name",
     count(c."order_id") as total_pizza_delivered
FROM runner_orders_final as r
JOIN customer_orders_final as c ON r."order_id" = c."order_id"
JOIN pizza_names as p on c."pizza_id" = p."pizza_id"
WHERE r."distance" != 0 
GROUP BY 1,2
ORDER BY 1,2;





---How many Vegetarian and Meatlovers were ordered by each customer?

select "customer_id", "pizza_name", count(*) from customer_orders_final as c 
left join pizza_names as p
on c."pizza_id" = p."pizza_id"
group by "customer_id", "pizza_name"
order by 1;





----What was the maximum number of pizzas delivered in a single order?
select count("pizza_id") as count_of_pizza from customer_orders_final
group by "order_id"
order by 1 desc
limit 1;


---For each customer, how many delivered pizzas had at least 1 change and how many had no changes?


select "customer_id",
sum(case when c."exclusions" <> ''  or c."extras" <> '' then 1 else 0
     end )
     as "at_least_change",
SUM(CASE WHEN c."exclusions" = '' AND c."extras" = '' then 1 else 0 end) as no_change,
from customer_orders_final as c
left join runner_orders_final as r on c."order_id" = r."order_id"
where "distance" != 0
group by 1;




---How many pizzas were delivered that had both exclusions and extras?

select * from customer_orders_final;

select
sum(case when c."exclusions" <> '' and c."extras" <> '' then 1 else 0 end ) as "changes"
from customer_orders_final as c
left join runner_orders_final as r on c."order_id" = r."order_id"
where "distance" != 0;





SELECT
    SUM(CASE 
           WHEN c."exclusions" IS NOT NULL AND c."extras" IS NOT NULL THEN 1 
           ELSE 0 END) as pizza_count_w_exclusions_extras
from customer_orders_final as c
join runner_orders_final as r on c."order_id" = r."order_id"
where "distance" != 0 and "exclusions" <> '' and "extras" <> '';



----What was the total volume of pizzas ordered for each hour of the day?

select hour("order_time"), count("order_id") from customer_orders_final
group by hour("order_time")
order by 2 desc;



SELECT
      DATE_PART(HOUR,"order_time") AS hour_of_day,
      count("pizza_id") as pizza_count
FROM customer_orders_final
group by 1
order by 2 desc;





-----What was the volume of orders for each day of the week

select dayofweek("order_time"), count("order_id") 
FROM customer_orders_final
group by 1
order by 2 desc;



select dayname("order_time"), count("order_id") 
FROM customer_orders_final
group by 1
order by 2 desc;



SELECT
     TO_CHAR("order_time",'DY') AS DAY_OF_WEEK,
     COUNT("pizza_id") as tot_pizza_ordered
FROM customer_orders_final
group by 1
order by 2 desc; 



---RUNNERS AND CUSTOMER EXPERIENCE------

---How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)

SELECT week(date_trunc(week, dateadd(day, 3,  "registration_date"))) as week_start, 
count("runner_id") as runners_signed_up FROM RUNNERS
where "registration_date" >= '2021-01-01'
group by 1;




----What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
with joined as
(select *, datediff(min, "order_time", "pickup_time")  as timetaken  from customer_orders_final as c left join runner_orders_final  as r on c."order_id" = r."order_id" WHERE  "distance" != 0 )


--select * from joined;
select "runner_id", ROUND(AVG(TIMETAKEN),0)   from joined  group by 1 ;



---Is there any relationship between the number of pizzas and how long the order takes to prepare?

with cte as (
select c."order_id","pizza_id", TIMEDIFF(MINUTE, "order_time", "pickup_time") as timetake from customer_orders_final AS C
left join runner_orders_final as r on c."order_id"= r."order_id" where "cancellation" = '')

select "order_id", count("pizza_id"),avg(timetake)  from cte
group by 1
order by 1
;



---What was the average distance travelled for each customer?
with cte as (
select * from customer_orders_final as c left join  runner_orders_final  as r 
on c."order_id"= r."order_id")
select "customer_id" , round(avg("distance"),0) as distance_travelled from cte group by 1;


---What was the difference between the longest and shortest delivery times for all orders?


select (max("duration")- min("duration")) as difference from runner_orders_final where "cancellation" = '';




---What was the average speed for each runner for each delivery and do you notice any trend for these values?


select * from runner_orders_final;

select "runner_id", ("distance"/"duration" * 60) as  speed from runner_orders_final where "cancellation" = '';--roup by "order_id";



----What is the successful delivery percentage for each runner?

select  "runner_id", round(100 * sum(case when "distance" != 0 then 1 else 0 end )/ count(*), 0) 
from runner_orders_final
group by 1;



SELECT
     "runner_id",
     ROUND(100 * SUM(CASE WHEN distance !=0 then 1 else 0 end)/ count(*),0) as success_perc
FROM runners_orders_cleaned
group by 1;




----- Ingredient Optimisation---

CREATE OR REPLACE TABLE PIZZA_RECIPES_CLEANED AS
SELECT 
    "pizza_id",
    TRIM(VALUE::INT) AS "TOPPING_ID",
FROM pizza_recipes,
LATERAL FLATTEN(INPUT => SPLIT("toppings", ','));



select * from PIZZA_RECIPES_CLEANED;
select * from pizza_names;
select * from customer_orders_final;
select * from customer_orders_cleaned_with_ext_exc;



CREATE OR REPLACE TABLE CUSTOMER_ORDERS_CLEANED_WITH_EXT_EXC AS
SELECT 
    "customer_id",
    "order_id",
    "pizza_id",
    TRIM(exc.VALUE::STRING) AS "EXCLUSIONS_TOPPINGS_ID",
    TRIM(ext.VALUE::STRING) AS "EXTRAS_TOPPINGS_ID",
    "order_time"
FROM customer_orders_final,
LATERAL FLATTEN(INPUT => SPLIT("exclusions", ',')) AS exc,
LATERAL FLATTEN(INPUT => SPLIT("extras", ',')) AS ext
ORDER BY "customer_id","order_id";


--What are the standard ingredients for each pizza?

select pr."pizza_id", pr.topping_id, pt."topping_name" from pizza_toppings as pt 
left join PIZZA_RECIPES_CLEANED  as pr on pt."topping_id" = pr.topping_id
group by pr."pizza_id",pr.topping_id ,pt."topping_name" ;


CREATE OR REPLACE TABLE PIZZA_INFO AS 
SELECT 
      pr."pizza_id",
      pn."pizza_name",
      pr.topping_id,
      pt."topping_name"
FROM PIZZA_RECIPES_CLEANED as pr
INNER JOIN PIZZA_TOPPINGS as pt ON pr.topping_ID = pt."topping_id"
INNER JOIN PIZZA_NAMES AS pn ON pr."pizza_id" = pn."pizza_id";

select * from pizza_info;



--What was the most commonly added extra

select pt."topping_name",extras_toppings_id,count(*) as cnt from customer_orders_cleaned_with_ext_exc  as cus left join pizza_toppings  as pt on cus.extras_toppings_id = pt."topping_id"
where extras_toppings_id != ''
group by extras_toppings_id , pt."topping_name"
order by cnt desc
limit 1;

select * from pizza_toppings;


---What was the most common exclusion
select * from customer_orders_cleaned_with_ext_exc ;


select exclusions_toppings_id, pt."topping_name",count(*) as cnt from customer_orders_cleaned_with_ext_exc as cust 
left join pizza_toppings as pt on 
cust.exclusions_toppings_id = pt."topping_id"
where exclusions_toppings_id != ''
group by exclusions_toppings_id, pt."topping_name" 
order by cnt desc
limit 1;



//**Generate an order item for each record in the customers_orders table in the format of one of the following:
--Meat Lovers
--Meat Lovers - Exclude Beef
--Meat Lovers - Extra Bacon
--Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

select * from customer_orders_cleaned_with_ext_exc;


insert into customer_orders_cleaned_with_ext_exc("pizza_id", "EXCLUSIONS_TOPPINGS_ID") values(1,3);

DELETE FROM customer_orders_cleaned_with_ext_exc WHERE "customer_id" IS NULL;



--What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

SELECT count(*) FROM customer_orders_cleaned_with_ext_exc as c LEFT JOIN RUNNER_ORDERS as r on
c."order_id"= r."order_id"
where r."distance" is not null 
group by "pizza_id", ;
